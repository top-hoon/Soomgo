const express = require('express');
const bodyParser = require("body-parser");
const mysql = require("mysql");
const config = require("../config/config.json");
const pool = mysql.createPool(config);
const router = express.Router();
const cookieParser = require('cookie-parser');
const crypto = require('crypto');
const conn = mysql.createConnection(config);
const jwt = require('jsonwebtoken');
const SECRET_Key = config['Secret-key'];
const { verifyToken } = require('./jwtcheck');
const multer = require('multer');
const path = require('path');

// 고수 서비스 생성
router.route("/gosuService/regist").post(verifyToken, (req, res) => {
    const gosu_idx = req.body.gosu_idx;
    const cate3_idx = req.body.cate3_idx;
    
    if(pool){
        createGosuService(gosu_idx, cate3_idx, (err, result) => {
            if(err) console.log(err);
            res.end();
        })
    }
})

function createGosuService(gosu_idx, cate3_idx, callback){
    pool.getConnection((err, conn) => {
        if(err) console.log(err);
        else{
            const sql = conn.query("insert into tb_gosus_services(gosu_idx, cate3_idx) values (?, ?)", [gosu_idx, cate3_idx], (err, result) => {
                conn.release();
                callback(err, result)
            })
        }
    })
}

// 고수 서비스 읽기
router.route("/gosuService/read").get(verifyToken, (req, res) => {
    const idx = req.query.idx;

    if(pool) readGosuService(idx, (err, result) => {
        if(err) console.log(err);
        res.json(result);
    });
    else console.log("디비 연결 실패");

    res.end();
});

function readGosuService(idx, callback){
    pool.getConnection((err, conn) => {
        if(err) console.log(err);
        else{
            const sql = conn.query("select * from tb_gosus_services where idx = ?", [idx], (err, result) => {
                conn.release();
                callback(err, result);
            })
        }
    })
}

// 고수 서비스 수정
router.route("/gusoService/update").put((req, res) => {
    const idx = req.body.idx;
    const gosu_idx = req.body.gosu_idx;
    const cate3_idx = req.body.cate3_idx;

    if(pool) updateGosuService(idx, gosu_idx, cate3_idx, (err, result) => {
        if(err) console.log(err);
    });
    else console.log("디비 연결 실패");

    res.end();
});


function updateGosuService(idx, gosu_idx, cate3_idx, callback){
    pool.getConnection((err, conn) => {
        if(err) console.log(err);
        else{
            const sql = conn.query("update tb_gosus_services set gosu_idx = ?, cate3_idx = ? where idx = ?", [gosu_idx, cate3_idx, idx], (err, result) => {
                conn.release();
                callback(err, result);
            })
        }
    })
}

// 고수 서비스 삭제
router.route("/gosuService/delete").delete((req, res) => {
    const idx = req.body.idx;
    if(pool) {
        deleteGosuService(idx, (err, result) => {
            if(err) console.log(err);
        });
    }
    else console.log("디비 연결 실패");

    res.end();
});

function deleteGosuService(idx, callback){
    pool.getConnection((err, conn) => {
        if(err) console.log(err);
        else{
            const sql = conn.query("delete from tb_gosus_services where idx = ?", [idx], (err, result) => {
                conn.release();
                callback(err, result);
            })
        }
    })
}

// 고수 서비스 목록
router.route("/gosuService/list").get((req, res) => {
    if(pool){
        const gosu_idx = req.query.gosu_idx;
        listGosuService(gosu_idx, (err, result) => {
            if(err) console.log(err);
            res.json(result);
        })
    }
})

function listGosuService(gosu_idx, callback){
    pool.getConnection((err, conn) => {
        if(err) console.log(err);
        else{
                const sql = conn.query("select * from tb_gosus_services where gosu_idx = ?", [gosu_idx], (err, result) => {
                    conn.release();
                    callback(err, result);
                })    
        }
    })
}